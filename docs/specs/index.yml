# swaggerのバージョン定義
swagger: "2.0"
# APIについての情報を書く
info:
  # API名
  title: データ管理基盤API
  # APIのバージョン
  version: 1.0.0
  # APIの説明
  description: データ管理基盤API仕様
schemes:
# スキーマ
- "http"
# APIのエントリポイントを記述
paths: 
  #URIを記載する
  /login:
    # GETリクエスト
    post:
      # 前述したタグ名
      tags: 
      - "login"
      #概要
      summary: "ログイン"
      #詳細説明
      description: "ユーザー情報より認証を行い、認証用トークンを返却する"
      # content-typeの指定
      produces: 
      - "application/json"
      parameters:
        # データ型
      - name: "body"
        in: "body"
        required: true
        schema:
          type: "object"
          properties:
            id:
              type: "string"
              example: "ABT0000"
            password:
              type: "string"
              example: "fugafuga"
      # レスポンスに関する記述
      responses:
        #statusCode200の時
        200:
          description: "成功"
          # レスポンスのbodyについて記述する
          schema:
            # jsonの場合,objectを指定する
            type: "object"
            # bodyの中身(サンプル値)
            properties:
              access_token: 
                #データ型
                type: "string"
                #ダミー値
                example: "ABT0000"
              permission:
                type: "integer"
                example: 1
        401(1):
          description: "ID、パスワード不正"
          schema:
            type: "object"
            properties:
              code:
                type: "string"
                example: "LOGIN_INCORRECT"
        401(2):
          description: "パスワード有効期限切れ"
          schema:
            type: "object"
            properties:
              code:
                type: "string"
                example: "PASSWORD_EXPIRED"
  /todo:
    # GETリクエスト
    post:
      # 前述したタグ名
      tags: 
      - "todo"
      #概要
      summary: "ログイン"
      #詳細説明
      description: "ユーザー情報より認証を行い、認証用トークンを返却する"
      # content-typeの指定
      produces: 
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "ユーザーid"
        required: true
        schema:
          type: "object"
          properties:
            name:
              type: "Authorization"
              example: "Bearer <JWT>"
        # データ型
        type: "integer"
      - name: "body"
        in: "body"
        description: "更新内容"
        required: true
        schema:
          type: "object"
          properties:
            name:
              type: "string"
              example: "fugafuga"
      # レスポンスに関する記述
      responses:
        #statusCode200の時
        200:
          description: "成功"
          # レスポンスのbodyについて記述する
          schema:
            # jsonの場合,objectを指定する
            type: "object"
            # bodyの中身(サンプル値)
            properties:
              id: 
                #データ型
                type: "string"
                #ダミー値
                example: "ABT0000"
              password:
                type: "string"
                example: "hogehoge"
        400:
          description: "失敗"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Bad Request"

  # リクエストによって値が変わるパラメータは`{}`で囲む
  /model1/{id}:
    # PUTリクエスト
    put:
      tags:
      - "products"
      summary: "商品情報更新"
      description: "URIで指定したidのproductsテーブルの商品情報を更新する"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "更新対象のid"
        required: true
        # データ型
        type: "integer"
      - name: "body"
        in: "body"
        description: "更新内容"
        required: true
        schema:
          type: "object"
          properties:
            name:
              type: "string"
              example: "fugafuga"
      responses:
        200:
          description: "成功"
          schema:
            type: "object"
            properties:
              id: 
                type: "integer"
                example: "1"
              name:
                type: "string"
                example: "fugafuga"
        400:
          description: "失敗"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Bad Request"
    # DELETEリクエスト
    delete:
      tags:
      - "products"
      summary: "商品情報削除"
      description: "URIで指定したidのproductsテーブルの商品情報を削除する"
      produces: 
      - "apllication/json"
      parameters:
      - name: "id"
        in: "path"
        description: "削除対象の商品id"
        required: true
        type: "integer"
      responses:
        204:
          description: "削除の戻り値"